# Create the package in build dir for testing purpose
SET(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/eigen3)
CONFIGURE_FILE(__init__.py ${CMAKE_CURRENT_BINARY_DIR}/eigen3/__init__.py COPYONLY)
CONFIGURE_FILE(convert.py ${CMAKE_CURRENT_BINARY_DIR}/eigen3/convert.py COPYONLY)
SET(OUTPUT_BINDING ${CMAKE_CURRENT_BINARY_DIR}/eigen3.cpp)

# Generate Python binding code
ADD_CUSTOM_COMMAND (
  OUTPUT ${OUTPUT_BINDING}
  COMMAND ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/generate.py ${OUTPUT_BINDING}
  DEPENDS generate.py
)

# Build the library
SET(SOURCES ${OUTPUT_BINDING})
SET(HEADERS MatrixBaseAddon.h MatrixAddon.h EigenUtils.h)

# Detect NumPy
FIND_NUMPY()

INCLUDE_DIRECTORIES(SYSTEM ${PYTHON_INCLUDE_PATH})
INCLUDE_DIRECTORIES(SYSTEM ${NUMPY_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(SYSTEM ${EIGEN3_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(.)

SET(MatrixBaseAddon "\"${CMAKE_CURRENT_SOURCE_DIR}/MatrixBaseAddon.h\"")
SET(MatrixAddon "\"${CMAKE_CURRENT_SOURCE_DIR}/MatrixAddon.h\"")
ADD_DEFINITIONS(-DEIGEN_MATRIXBASE_PLUGIN=${MatrixBaseAddon}
                -DEIGEN_MATRIX_PLUGIN=${MatrixAddon})

ADD_LIBRARY(_eigen3 MODULE ${SOURCES})

SET_TARGET_PROPERTIES(_eigen3 PROPERTIES PREFIX "")

# Install rules
INSTALL(TARGETS _eigen3 DESTINATION "${PYTHON_SITELIB}/eigen3")
PYTHON_INSTALL_BUILD(eigen3 __init__.py "${PYTHON_SITELIB}")
PYTHON_INSTALL_BUILD(eigen3 convert.py "${PYTHON_SITELIB}")

